---
AWSTemplateFormatVersion: '2010-09-09'

Description: Creates IAM Policies and SageMaker Notebook to work with Streamlit.

Parameters:
  NotebookName:
    Type: String
    Default: StreamlitWorkshop
    Description: Enter the name of the SageMaker notebook instance. Default is 'StreamlitWorkshop'.

  VolumeSize:
    Type: Number
    Default: 10
    MinValue: 5
    MaxValue: 16384
    ConstraintDescription: Must be an integer between 5 (GB) and 16384 (16 TB).
    Description: Enter the size of the EBS volume in GB.

Resources:
  # SageMaker Execution Role
  SageMakerIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
        - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
        - "arn:aws:iam::aws:policy/AmazonECS_FullAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess"
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess" 
        - "arn:aws:iam::aws:policy/IAMFullAccess" 
        - "arn:aws:iam::aws:policy/AWSCloudFormationFullAccess"

  # SageMaker Notebook
  NotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      InstanceType: "ml.t2.medium"
      NotebookInstanceName: !Ref NotebookName
      LifecycleConfigName: !GetAtt NotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
      RoleArn: !GetAtt SageMakerIamRole.Arn
      VolumeSizeInGB: !Ref VolumeSize
      DefaultCodeRepository: https://github.com/nicolasmetallo/legendary-streamlit-demo.git

  # SageMaker Lifecycle Configuration that enables Streamlit to run
  NotebookInstanceLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      NotebookInstanceLifecycleConfigName: !Sub "${NotebookName}-lifecycle-config"
      OnStart:
        - Content:
            Fn::Base64: |
              set -e

              # OVERVIEW
              # Modified from: https://github.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/pull/50
              #
              # This script enables Streamlit webapp to run on SageMaker notebook instance.
              #
              # By default Streamlit is installed in `python3` virtual environment. Start Streamlit server by running the following command in notebook terminal:
              # - source activate python3
              # - streamlit run app.py
              #
              # Streamlit web app can be accessed using the URL `{base_url}/proxy/{port}/` in a browser. With a slash at the end.
              # E.g. https://{notebookname}.notebook.{region}.sagemaker.aws/proxy/8501/

              sudo -u ec2-user -i <<'EOF'
              # PARAMETERS
              source /home/ec2-user/anaconda3/bin/activate JupyterSystemEnv

              # Disable nbserverproxy
              jupyter serverextension disable --py nbserverproxy

              cp /home/ec2-user/anaconda3/envs/JupyterSystemEnv/etc/jupyter/jupyter_notebook_config.json \
              /home/ec2-user/anaconda3/envs/JupyterSystemEnv/etc/jupyter/jupyter_notebook_config.json.bk
              sed 's/"nbserverproxy": true/"nbserverproxy": false/g' /home/ec2-user/anaconda3/envs/JupyterSystemEnv/etc/jupyter/jupyter_notebook_config.json.bk \
              > /home/ec2-user/anaconda3/envs/JupyterSystemEnv/etc/jupyter/jupyter_notebook_config.json

              # Uninstall nbserverproxy
              pip uninstall nbserverproxy --yes

              # Install jupyter-server-proxy
              pip install jupyter-server-proxy

              # Activate environment for Streamlit installation
              ENVIRONMENT=python3
              source /home/ec2-user/anaconda3/bin/activate "$ENVIRONMENT"
              pip install streamlit

              # Install other dependencies
              pip install pandas numpy requests Pillow matplotlib boto3 botocore opencv-python-headless PyYAML tensorflow
              
              # Fix remote access problem: https://discuss.streamlit.io/t/remote-access-problem/5829
              pip install --upgrade protobuf

              # Restart jupyter server
              sudo initctl restart jupyter-server --no-wait

              # Install Node.js and AWS CDK
              # Source: https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
              . ~/.nvm/nvm.sh
              nvm install node
              node -e "console.log('Running Node.js ' + process.version)"
              npm install -g aws-cdk

              source /home/ec2-user/anaconda3/bin/deactivate
            
              EOF
Outputs:
  NotebookInstanceURL:
    Value: !Sub "https://console.aws.amazon.com/sagemaker/home?region=${AWS::Region}#/notebook-instances/openNotebook/${NotebookInstance.NotebookInstanceName}?view=classic"